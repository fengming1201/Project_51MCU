C51 COMPILER V9.56.0.0   OS_CPU_C                                                          10/30/2023 17:47:34 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE OS_CPU_C
OBJECT MODULE PLACED IN .\OutPut\OS_CPU_C.obj
COMPILER INVOKED BY: C:\Keil_v5c\C51\BIN\C51.EXE uCosii\OS_CPU_C.C LARGE OPTIMIZE(8,SIZE) DEBUG OBJECTEXTEND PRINT(.\Out
                    -Put\OS_CPU_C.lst) TABS(2) OBJECT(.\OutPut\OS_CPU_C.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                               uC/OS-II
   4          *                                               实时内核
   5          *
   6          *                        (c) Copyright 1992-1998, Jean J. Labrosse, Plantation, FL
   7          *                                               版权所有
   8          *
   9          *                                            MCU-51 专用代码
  10          *                                           KEIL C51大模式编译
  11          *
  12          * 文件名 : OS_CPU_C.C
  13          * 作者   : Jean J. Labrosse
  14          *********************************************************************************************************
  15          */
  16          
  17          #define  OS_CPU_GLOBALS
  18          #include "source\includes.h"
  19          
  20          /*
  21          *********************************************************************************************************
  22          *                                        初始化任务堆栈
  23          *
  24          * 描述       : 这个函数被OSTaskCreate()或OSTaskCreateExt()调用，以便初始化新创建任务的堆栈结构。本函数
  25          *              与处理器高度相关。
  26          *
  27          * 参数       : task          指向任务代码的指针
  28          *
  29          *              pdata         当任务第一次执行时将要传入任务的用户数据结构指针
  30          *
  31          *              ptos          栈顶指针。ptos指针被默认为用户堆栈入口指针。如果OS_STK_GROWTH被置1，那么，
  32          *                            ptos指向用户堆栈的最高有效地址。同样地，如果OS_STK_GROWTH清0，ptos将指向
  33          *                            用户堆栈的最低有效地址。
  34          *
  35          *              opt           指定可以改变OSTaskStkInit()行为的选项。(见uCOS_II.H for OS_TASK_OPT_???)。
  36          *
  37          * 返回值     : 我修改了原来的程序，使函数总是返回用户堆栈空间的最低有效地址。这样修改提高了TCB换入换出
  38          *              的效率。
  39          *
  40          * 注意       : 任务堆栈结构:
  41          *
  42          *                                    ---------- -
  43          *                 用户栈最高地址---->|        | |
  44          *                                    ---------- |
  45          *                                    |   ...  | 仿真堆栈空间
  46          *----------                          ---------- | 每任务一个
  47          *|OSTCBCur|               ?C_XBP---->|        | | KEIL自动处理
  48          *----------                          ---------- -
  49          *    |                               |空闲间隔|
  50          *    |     -----------------------   ----------                           ----------
  51          *    \---->|OSTCBCur->OSTCBStkPtr|   |?C_XBP低|                    SP---->|        |
  52          *          -----------------------   ----------                           ----------
  53          *                     |              |?C_XBP高|                           |        |
  54          *                     |              ---------- -                         ----------
C51 COMPILER V9.56.0.0   OS_CPU_C                                                          10/30/2023 17:47:34 PAGE 2   

  55          *                     |              |        | |                         |   .    |
  56          *                     |              ---------- |                         |   .    |
  57          *                     |              |        | |                         |   .    |
  58          *                     |              ---------- |                         ----------
  59          *                     |              |   .    |长度                       |        | +1
  60          *                     |              |   .    | |                         ----------
  61          *                     |              |   .    | |             OSStack---->|        | 0
  62          *                     |              ---------- |                         ----------
  63          *                     |              |        | |          OSStkStart---->| 不关心 | -1  低地址
  64          *                     |              ---------- -                         ----------
  65          *                     \------------->|  长度  | 低地址                   系统硬件堆栈
  66          *                                    ----------
  67          *                                     用户堆栈                       长度=SP-OSStkStart
  68          *********************************************************************************************************
  69          */
  70          
  71          OS_STK *OSTaskStkInit (void (*task)(void *pd) reentrant, void *ppdata, OS_STK *ptos, INT16U opt) reentrant
  72          {    
  73   1          OS_STK *stk;
  74   1      
  75   1          ppdata = ppdata;
  76   1          opt    = opt;                               //opt没被用到，保留此语句防止告警产生    
  77   1          stk    = ptos;                              //用户堆栈最低有效地址
  78   1          *stk++ = 15;                                //用户堆栈长度
  79   1          *stk++ = (INT16U)task & 0xFF;               //任务地址低8位
  80   1          *stk++ = (INT16U)task >> 8;                 //任务地址高8位    
  81   1          *stk++ = 0x0A;                              //ACC
  82   1          *stk++ = 0x0B;                              //B
  83   1          *stk++ = 0x00;                              //DPH
  84   1          *stk++ = 0x00;                              //DPL
  85   1          *stk++ = 0x00;                              //PSW
  86   1          *stk++ = 0x00;                              //R0
  87   1          
  88   1        //R3、R2、R1用于传递任务参数ppdata，其中R3代表存储器类型，R2为高字节偏移，R1为低字节位移。
  89   1        //通过分析KEIL汇编，了解到任务的void *ppdata参数恰好是用R3、R2、R1传递，不是通过虚拟堆栈。
  90   1          *stk++ = (INT16U)ppdata & 0xFF;             //R1
  91   1          *stk++ = (INT16U)ppdata >> 8;               //R2
  92   1          *stk++ = 0x01;                              //R3  因为我用的全是XDATA，所以存储器类型固定为1，见C51.PD
             -F第178页说明。
  93   1      
  94   1          *stk++ = 0x04;                              //R4
  95   1          *stk++ = 0x05;                              //R5
  96   1          *stk++ = 0x06;                              //R6
  97   1          *stk++ = 0x07;                              //R7
  98   1                                                      //不用保存SP，任务切换时根据用户堆栈长度计算得出。    
  99   1          *stk++ = (INT16U) (ptos+MaxStkSize) >> 8;   //?C_XBP 仿真堆栈指针高8位
 100   1          *stk++ = (INT16U) (ptos+MaxStkSize) & 0xFF; //?C_XBP 仿真堆栈指针低8位
 101   1              
 102   1          return ((void *)ptos);
 103   1      }
 104          
 105          #if OS_CPU_HOOKS_EN
 106          
 107          /*
 108          *********************************************************************************************************
 109          *                                       OS INITIALIZATION HOOK
 110          *                                            (BEGINNING)
 111          *
 112          * Description: This function is called by OSInit() at the beginning of OSInit().
 113          *
 114          * Arguments  : none
 115          *
C51 COMPILER V9.56.0.0   OS_CPU_C                                                          10/30/2023 17:47:34 PAGE 3   

 116          * Note(s)    : 1) Interrupts should be disabled during this call.
 117          *********************************************************************************************************
 118          */
 119          #if OS_VERSION > 203
 120          void OSInitHookBegin (void) reentrant
 121          {
 122   1      
 123   1      }
 124          #endif
 125          
 126          /*
 127          *********************************************************************************************************
 128          *                                       OS INITIALIZATION HOOK
 129          *                                               (END)
 130          *
 131          * Description: This function is called by OSInit() at the end of OSInit().
 132          *
 133          * Arguments  : none
 134          *
 135          * Note(s)    : 1) Interrupts should be disabled during this call.
 136          *********************************************************************************************************
 137          */
 138          #if OS_VERSION > 203
 139          void OSInitHookEnd (void) reentrant
 140          {
 141   1      }
 142          #endif
 143          
 144          /*
 145          *********************************************************************************************************
 146          *                                          任务创建钩挂函数
 147          *
 148          * 描述       : 任务创建时调用
 149          *
 150          * 参数       : ptcb是指向将被创建任务的任务控制块的指针。
 151          *
 152          * 注意       : 1) 调用期间中断被禁止
 153          *********************************************************************************************************
 154          */
 155          void OSTaskCreateHook (OS_TCB *ptcb) reentrant
 156          {
 157   1          ptcb = ptcb;                       /* Prevent compiler warning                                     */
 158   1      }
 159          
 160          
 161          /*
 162          *********************************************************************************************************
 163          *                                          任务删除钩挂函数
 164          *
 165          * 描述       : 任务删除时调用
 166          *
 167          * 参数       : ptcb是指向将被删除任务的任务控制块的指针。
 168          *
 169          * 注意       : 1) 调用期间中断被禁止
 170          *********************************************************************************************************
 171          */
 172          #if OS_TASK_DEL_EN > 0
              void OSTaskDelHook (OS_TCB *ptcb) reentrant
              {
                  ptcb = ptcb;                       /* Prevent compiler warning                                     */
              }
              #endif
C51 COMPILER V9.56.0.0   OS_CPU_C                                                          10/30/2023 17:47:34 PAGE 4   

 178          
 179          /*
 180          *********************************************************************************************************
 181          *                                          任务切换钩挂函数
 182          *
 183          * 描述       : 执行任务切换时调用。这允许你在上下文切换期间执行其它操作。
 184          *
 185          * 参数       : 无
 186          *
 187          * 注意       : 1) 调用期间中断被禁止
 188          *              2) 假定全局指针'OSTCBHighRdy'已经指向了将要被换入的任务控制块(即:最高优先级任务)，并且
 189          *                 'OSTCBCur'指向了将被换出的任务(即:当前任务)。
 190          *********************************************************************************************************
 191          */
 192          void OSTaskSwHook (void) reentrant
 193          {
 194   1      }
 195          
 196          /*
 197          *********************************************************************************************************
 198          *                                          统计任务钩挂函数
 199          *
 200          * 描述       : 这个函数每秒钟被uC/OS-II统计任务调用。这么做使你的应用程序可以增加统计任务的功能。
 201          *
 202          * 注意       : 无
 203          *********************************************************************************************************
 204          */
 205          #if OS_TASK_STAT_EN > 0
              void OSTaskStatHook (void) reentrant
              {
              }
              #endif
 210          
 211          /*
 212          *********************************************************************************************************
 213          *                                           OSTCBInit() HOOK
 214          *
 215          * Description: This function is called by OSTCBInit() after setting up most of the TCB.
 216          *
 217          * Arguments  : ptcb    is a pointer to the TCB of the task being created.
 218          *
 219          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
 220          *********************************************************************************************************
 221          */
 222          #if OS_VERSION > 203
 223          void OSTCBInitHook (OS_TCB *ptcb) reentrant
 224          {
 225   1          ptcb = ptcb;                                           /* Prevent Compiler warning                 */
 226   1      }
 227          #endif
 228          
 229          /*
 230          *********************************************************************************************************
 231          *                                          定时钩挂函数
 232          *
 233          * 描述       : 本函数每一滴答被调用一次。
 234          *
 235          * 参数       : 无
 236          *
 237          * 注意       : 1) 在本调用期间中断可以或不可以使能。
 238          *********************************************************************************************************
 239          */
C51 COMPILER V9.56.0.0   OS_CPU_C                                                          10/30/2023 17:47:34 PAGE 5   

 240          void OSTimeTickHook (void) reentrant
 241          {
 242   1      }
 243          
 244          /*
 245          *********************************************************************************************************
 246          *                                             IDLE TASK HOOK
 247          *
 248          * Description: This function is called by the idle task.  This hook has been added to allow you to do  
 249          *              such things as STOP the CPU to conserve power.
 250          *
 251          * Arguments  : none
 252          *
 253          * Note(s)    : 1) Interrupts are enabled during this call.
 254          *********************************************************************************************************
 255          */
 256          #if OS_VERSION >= 251
 257          void OSTaskIdleHook (void) reentrant
 258          {
 259   1      }
 260          #endif
 261          
 262          #endif
 263          
 264          /*
 265             使用C语言的中断处理函数有助与提高程序的移植性。建议中断程序不要太长，如果长则使用信号量来与任务同步，
 266             在外部任务中实现大量的处理。
 267             中断处理例程都放在下面。
 268          */
 269          
 270          void UserTickTimer(void)
 271          {
 272   1          TH0=0xB8;       //普通51定时器方式1，必须在发生中断时，重新赋值并再次启动计时
 273   1          TL0=0;              //Tick=50次/秒(即0.02秒/次)，晶振11.0592M
 274   1          TR0=1;
 275   1      }
 276          
 277          /* 
 278            uCOS-II系统时钟中断处理程序
 279          */
 280          void OSTickISR(void) interrupt 1
 281          {
 282   1          OSIntEnter();         // Must be called first at every hardware interrupt entry point 
 283   1          UserTickTimer();        // User functions can be called here.
 284   1          OSTimeTick();         // Must be called during tick isr 
 285   1          OSIntExit();          // Must be called finally at every hardware interupt exit point 
 286   1      }
 287          
 288          /*
 289            设置硬件寄存器的初始值。
 290            初始化定时器0,作为ucOS-II的系统时钟。
 291            还有其他的与硬件相关的初始化也可以放在这里。
 292          */
 293          
 294          void InitHardware(void) reentrant
 295          {   
 296   1          TMOD &= 0xF0;
 297   1        TMOD |= 0x01;   //定时器0：模式1(16位定时器)，仅受TR0控制；定时器1：波特率发生器
 298   1          TH0  = 0xB8;   //定义Tick=50次/秒(即0.02秒/次),TH,TL值与CPU的频率有关(11.0592M)!!!!!gai!!!!!!
 299   1          TL0  = 0x00;   //OS_CPU_C.C中定时器中断响应也要设置，OS_CFG.H中OS_TICKS_PER_SEC也有关系
 300   1          ET0  = 1;    //允许T0中断(在第一个任务开始执行时才开时钟中断,否则万一中断系统进入不可知状态)
 301   1          TR0  = 1;
C51 COMPILER V9.56.0.0   OS_CPU_C                                                          10/30/2023 17:47:34 PAGE 6   

 302   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    641    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
